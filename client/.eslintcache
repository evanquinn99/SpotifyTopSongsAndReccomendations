[{"C:\\Users\\equinn\\Desktop\\my-app\\client\\src\\index.js":"1","C:\\Users\\equinn\\Desktop\\my-app\\client\\src\\reportWebVitals.js":"2","C:\\Users\\equinn\\Desktop\\my-app\\client\\src\\App.js":"3"},{"size":553,"mtime":1609874146836,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1609169396994,"results":"6","hashOfConfig":"5"},{"size":4579,"mtime":1609949967226,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"paj76z",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"10"},"C:\\Users\\equinn\\Desktop\\my-app\\client\\src\\index.js",[],["17","18"],"C:\\Users\\equinn\\Desktop\\my-app\\client\\src\\reportWebVitals.js",[],["19","20"],"C:\\Users\\equinn\\Desktop\\my-app\\client\\src\\App.js",["21"],"import React, { Component } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport './App.css';\nimport { Image } from \"react-bootstrap\";\n\n/*spotify web api library courtesy of Jose M Perez: https://github.com/jmperez/spotify-web-api-js */\nconst spotifyApi = new SpotifyWebApi();\n\nclass NowPlaying extends Component {\n  constructor() {\n    /* this getHash code is coming from the spotify example */\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      nowPlaying: { name: 'Not Checked', albumArt: '' }\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying(){\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n        this.setState({\n          nowPlaying: { \n              name: response.item.name, \n              albumArt: response.item.album.images[0].url\n            }\n        });\n      })\n  }\n\n  \n  render() {\n    return (\n      <div className=\"NowPlaying\">\n        <a href='http://localhost:8888' > Login to Spotify </a>\n      <div>\n        Now Playing: { this.state.nowPlaying.name }\n      </div>\n      <div>\n        <img src={this.state.nowPlaying.albumArt} style={{ height: 150 }}/>\n      </div>\n      { this.state.loggedIn &&\n        <button onClick={() => this.getNowPlaying()}>\n          Check Now Playing\n        </button>\n      }\n\n      \n    </div>\n    \n    );\n  }\n}\n\nexport class GetRecents extends Component {\n\n  constructor() {\n    /* this getHash code is coming from the spotify example */\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n\n    this.state = {\n      loggedIn: token ? true : false,\n      size: 0,\n      songs: []\n    }\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getRecentTracks(){\n    let recentTracks = [];\n    spotifyApi.getMyRecentlyPlayedTracks({limit: 5})\n      .then((response)=>{\n        console.log(response);\n        for (let i =0 ; i < response.items.length; i++){\n          let song = {\n            title : response.items[i].track.name,\n            artist : response.items[i].track.artists[0].name,\n            image : response.items[i].track.album.images[0].url\n          }\n          recentTracks.push(song)\n        }\n        console.log(recentTracks);\n        this.setState({\n          size: recentTracks.length,\n          songs : recentTracks.slice()\n        });\n      })\n  }\n\n  render() {\n\n    //if (this.state.loggedIn) {\n      //let songs = this.getRecentTracks();\n   // }\n    //this.getRecentTracks();\n    let songs = this.state.songs;\n    console.log(this.state.size);\n    let rows = [];\n    for (var i = 0; i < this.state.size; i++){\n      let rowID = `row${i}`\n      let cell = []\n      for (var idx = 0; idx < 3; idx++){\n        let cellID = `cell${i}-${idx}`\n        if (idx === 0){\n          cell.push(\n            <td key={cellID} id={cellID}>\n              <Image\n                src={songs[i].image}\n                alt=\"album art\"\n                width=\"75\"\n                height=\"75\"\n                rounded\n              />\n            </td>)\n        }\n        else if (idx === 1){\n          cell.push(<td key={cellID} id={cellID}>{songs[i].title}</td>)\n        }\n        else{\n          cell.push(<td key={cellID} id={cellID}>{songs[i].artist}</td>)\n        }\n      }\n      rows.push(<tr key={i} id={rowID}>{cell}</tr>)\n    }\n\n    return(\n      \n      <div className = \"GetRecents\" >\n        <div>\n          { this.state.loggedIn &&\n          <button onClick={() => this.getRecentTracks()}>\n            Check recents\n          </button>\n          }\n        </div>\n        <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col s12 board\">\n            <table id=\"simple-board\">\n               <tbody>\n                 {rows}\n               </tbody>\n             </table>\n          </div>\n        </div>\n      </div>\n      </div>\n\n    )\n\n  }\n\n\n}\n\nexport default NowPlaying;\n//export  GetRecents;",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"22","replacedBy":"26"},{"ruleId":"24","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":57,"column":9,"nodeType":"30","endLine":57,"endColumn":76},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],["31"],["32"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]